<?php

namespace Controllers\Frontend;

use Bones\Request;
use Models\Cart;
use Models\Order;
use Models\OrderItem;
use Models\Product;

class PaymentController
{

	public function index(Request $request)
	{
		dd($request);
	}

    public function check(Request $request)
	{
        $transactionId = $request->id;
        $api_endpoint = 'https://'.setting('wompi.payment_type').'.wompi.co/v1/transactions/'.$transactionId;
        $response = file_get_contents($api_endpoint);
        $data = json_decode($response);
        
        if(isset($data->data)) {
            $result = $data->data;
            $order = new Order();
            $order->reference = $result->reference;
            $order->transaction_id = $result->id;
            $order->payment_method_type = $result->payment_method_type;
            $order->payment_method = json_encode($result->payment_method);
            $order->status = $result->status;
            $order->status_message = $result->status_message;
            $order->currency = $result->currency;
            $order->amount_in_cents = $result->amount_in_cents;
            $order->user_id = auth()->id;
            $order = $order->save();

            $cartItems = cartItems();
            foreach($cartItems as $item) {
                $orderItem = new OrderItem();
                $orderItem->order_id = $order->id;
                $orderItem->product_id = $item->product_id;
                $orderItem->product_name = $item->product_name;
                $orderItem->product_price = $item->product_price;
                $orderItem->product_qty = $item->product_qty;
                $orderItem->save();
            }
        }

        Cart::where('user_id',auth()->id)->delete();
        
        return redirect(route('frontend.payment.success', ['order' => $order->id]))->go();

	}

    public function success(Request $request, Order $order)
	{
        return render('frontend/payment/success', [
			'order' => $order
		]);
    }

    public function notify(Request $request)
	{
        $raw_post_data = '{"event":"transaction.updated","data":{"transaction":{"id":"121271-1660393395-39735","created_at":"2022-08-13T12:23:15.380Z","finalized_at":"2022-08-13T12:23:15.000Z","amount_in_cents":376390,"reference":"Yp089nQZh4gV","customer_email":"akbarmaknojiya@gmail.com","currency":"COP","payment_method_type":"BANCOLOMBIA_TRANSFER","payment_method":{"type":"BANCOLOMBIA_TRANSFER","extra":{"async_payment_url":"https://sandbox.wompi.co/v1/payment_methods/redirect/bancolombia_transfer?transferCode=L80DMNBxFJJyka3d-approved","external_identifier":"L80DMNBxFJJyka3d-approved"},"user_type":"PERSON","sandbox_status":"APPROVED","payment_description":"Pago a digitaldeluxes, ref: Yp089nQZh4gV"},"status":"APPROVED","status_message":null,"shipping_address":null,"redirect_url":"http://localhost/digital-deluxes/payment/check","payment_source_id":null,"payment_link_id":null,"customer_data":{"legal_id":"4423423","full_name":"Akbar Husen","phone_number":"+57784545454454545","legal_id_type":"CC"},"billing_data":null}},"sent_at":"2022-08-13T12:23:15.598Z","timestamp":1660393395,"signature":{"checksum":"cf1446f28f6198a34c1723f9f7668832e6c2d569e50594b8073ccf2f991da44e","properties":["transaction.id","transaction.status","transaction.amount_in_cents"]},"environment":"test"}';
        // $raw_post_data = file_get_contents('php://input'); 
        file_put_contents('ipn.txt', $raw_post_data);

        $data = json_decode($raw_post_data);
        
        if(isset($data->event)) {
            $transaction = $data->data->transaction;
            $order = Order::where('transaction_id', $transaction->id)->first();
            $order->status = $transaction->status;
            $order->updated_at = $transaction->finalized_at;
            $order->save();
        }

        $orderProducts = OrderItem::where('order_id', $order->id)->get();
        
        $products = [];
        foreach($orderProducts as $orderProduct) {

            $keyTypeResponse = $this->fetchKeyType($orderProduct);
            dd($keyTypeResponse);
            $products[] = [
                'productId' => $orderProduct->product_id,
                'qty' => $orderProduct->product_qty,
                'price' => $orderProduct->product_price,
                'name' => $orderProduct->product_name,
                // 'keyType' => 
            ];
        }


        $params = [
            'products' => $products
        ];

        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, setting('kinguin.endpoint').'/v2/order');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));

        $headers = array();
        $headers[] = 'X-Api-Key: '.setting('kinguin.api_key');
        $headers[] = 'Content-Type: application/json';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);
    }

    public function fetchKeyType($orderProduct) {
        
        $kinguinId = $orderProduct->product->kinguinId;
        
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, setting('kinguin.endpoint').'/v1/order');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "{\"products\":[{\"kinguinId\":".$kinguinId.",\"qty\":".$orderProduct->product_qty.",\"name\":\"".$orderProduct->product_name."\",\"price\":".$orderProduct->product_price.",\"keyType\":\"text\"}]}");

        $headers = array();
        $headers[] = 'X-Api-Key: '.setting('kinguin.api_key');
        $headers[] = 'Content-Type: application/json';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);
        return $result;
    }
    
}